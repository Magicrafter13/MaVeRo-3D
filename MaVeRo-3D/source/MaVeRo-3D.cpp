#include "MaVeRo-3D.hpp"

//init
int debugTF = 1;
char versiontxtt[8] = " Alpha ";
char versiontxtn[9] = "01.00.00";
int vernumqik = 0;

float offset3d = 0.0f;

int MaVeRo();
sftd_font *default_fnt;
const char *test = "Test!";
const char *test3d = "Test 3D!!!";

sprite testsprite;
sprite spr_Geno;
sprite normal_tile;
sprite empty_tile;
sprite spr_Goblin;
sprite spr_Null;

bool init_sprites()
{
	std::vector<int> R1 = {
		0xFF, 0x00, 0xFF, 0x00, 0xFF,
		0x80, 0x00, 0x80, 0x00, 0x80,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00
	};
	std::vector<int> G1 = {
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x55, 0x00, 0x55, 0x00,
		0xFF, 0xAA, 0x00, 0xAA, 0xFF,
		0xFF, 0x00, 0x00, 0x00, 0xFF
	};
	std::vector<int> B1 = {
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00
	};
	std::vector<int> A1 = {
		0xFF, 0x00, 0xFF, 0x00, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0xFF, 0x00, 0xFF, 0x00,
		0xFF, 0xFF, 0x00, 0xFF, 0xFF,
		0xFF, 0x00, 0x00, 0x00, 0xFF
	};
	std::vector<int> R2 = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x25, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x67, 0x94, 0xB1, 0xB1, 0xB1, 0x94, 0x67, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xD1, 0xF5, 0xFD, 0xFA, 0xFC, 0xFF, 0xFF, 0xFF, 0xDE, 0x91, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0xF5, 0xF7, 0xF2, 0xF7, 0xF5, 0xF5, 0xF7, 0xF1, 0xF8, 0xF8, 0xFD, 0xDA, 0x7E, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0xEE, 0xF0, 0xF1, 0xF2, 0xF2, 0xF5, 0xFC, 0xF4, 0xF4, 0xF2, 0xED, 0xEE, 0xFA, 0xF8, 0xB0, 0x49, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEA, 0xDD, 0xE6, 0xEA, 0xEE, 0xF4, 0xF4, 0xF6, 0xED, 0xFA, 0xF1, 0xEC, 0xF1, 0xE4, 0xF2, 0xFB, 0xDB, 0x7A, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x88, 0xE4, 0xE0, 0xDE, 0xE2, 0xE9, 0xF0, 0xF8, 0xF2, 0xF3, 0xEF, 0xF2, 0xF5, 0xFB, 0xF5, 0xF2, 0xF6, 0xEC, 0xEA, 0xDB, 0x96, 0x46, 0x2D, 0x69, 0x4E, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x4C, 0xC4, 0xDB, 0xDF, 0xE1, 0xE8, 0xF0, 0xF4, 0xF7, 0xFA, 0xFB, 0xF9, 0xFF, 0xFD, 0xFF, 0xFD, 0xF4, 0xE6, 0xDA, 0xD3, 0xD5, 0xCF, 0xAE, 0xA7, 0xA0, 0x60, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x88, 0xC0, 0xD7, 0xE0, 0xE5, 0xEF, 0xF9, 0xF6, 0xF5, 0xFF, 0xFC, 0xFD, 0xF4, 0xF4, 0xEE, 0xD6, 0xCD, 0xD3, 0xDD, 0xD7, 0xCA, 0xB9, 0xB0, 0xBC, 0xB1, 0x82, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x57, 0x9D, 0xB7, 0xD4, 0xDB, 0xDD, 0xD7, 0xD2, 0xE1, 0xEA, 0xF4, 0xFC, 0xF3, 0xEC, 0xEC, 0xDC, 0xC7, 0xD4, 0xE7, 0xDC, 0xCD, 0xCC, 0xC6, 0xB7, 0xC9, 0xBB, 0x98, 0x6F, 0x00, 0x00,
		0x00, 0x00, 0x82, 0x99, 0xA2, 0xC6, 0xD3, 0xD6, 0xC9, 0xC4, 0xD8, 0xE7, 0xE9, 0xF9, 0xF8, 0xF1, 0xE7, 0xD7, 0xCB, 0xCF, 0xC8, 0xAA, 0xB4, 0xBA, 0xD1, 0xE6, 0xE4, 0xCB, 0xAA, 0x85, 0x00, 0x00,
		0x00, 0x00, 0xA2, 0x94, 0xA2, 0xCF, 0xDC, 0xDD, 0xE1, 0xD9, 0xCA, 0xCA, 0xD8, 0xF0, 0xED, 0xEA, 0xCA, 0xC9, 0xD5, 0xB8, 0x8F, 0x6D, 0xBE, 0xA6, 0xCE, 0xD1, 0xD4, 0xD2, 0xB9, 0x92, 0x00, 0x00,
		0x00, 0x00, 0xB4, 0xA8, 0xA9, 0xBB, 0xAF, 0xB0, 0xA7, 0xB1, 0xBF, 0xCC, 0xBF, 0xDE, 0xE2, 0xCF, 0xC7, 0xE3, 0xCF, 0xD9, 0xAC, 0xC2, 0xD2, 0xC6, 0xD0, 0xD0, 0xCE, 0xCF, 0xBB, 0xA0, 0x00, 0x00,
		0x00, 0x00, 0xB7, 0xD8, 0xDA, 0xAC, 0x9A, 0xB4, 0x74, 0x8F, 0xE1, 0xDB, 0xC2, 0xD4, 0xE3, 0xBE, 0xBF, 0xCD, 0xCD, 0xD3, 0xE4, 0xE1, 0xD6, 0xCF, 0xD3, 0xD8, 0xDB, 0xD3, 0xBB, 0x9F, 0x00, 0x00,
		0x00, 0x00, 0xB3, 0xD8, 0xDE, 0xB7, 0xA3, 0xC5, 0xB8, 0xD3, 0xCA, 0xC0, 0xAD, 0xD7, 0xE1, 0xC6, 0xCD, 0xDA, 0xE0, 0xDA, 0xDE, 0xE3, 0xE6, 0xF0, 0xF2, 0xE5, 0xDA, 0xD8, 0xC0, 0x97, 0x00, 0x00,
		0x00, 0x00, 0x97, 0xCC, 0xC8, 0xCA, 0xBB, 0xC2, 0xD3, 0xD3, 0xD0, 0xCF, 0xB3, 0xDE, 0xE3, 0xCB, 0xD5, 0xE5, 0xFC, 0xFA, 0xFD, 0xF9, 0xF0, 0xF5, 0xF7, 0xEE, 0xD9, 0xD5, 0xC0, 0x98, 0x00, 0x00,
		0x00, 0x00, 0xA2, 0xC7, 0xC9, 0xD0, 0xDC, 0xD8, 0xDD, 0xE1, 0xF0, 0xD5, 0xB9, 0xE8, 0xF4, 0xD4, 0xC9, 0xD5, 0xF5, 0xFE, 0xFD, 0xFF, 0xFC, 0xFD, 0xF7, 0xF5, 0xE1, 0xD6, 0xBB, 0x99, 0x00, 0x00,
		0x00, 0x00, 0xA3, 0xC5, 0xCC, 0xDE, 0xF0, 0xF0, 0xF0, 0xF7, 0xFF, 0xE7, 0xC0, 0xE8, 0xF8, 0xE3, 0xD4, 0xCE, 0xCF, 0xEF, 0xE6, 0xED, 0xFC, 0xFF, 0xFA, 0xF7, 0xE5, 0xD5, 0xBD, 0x9A, 0x00, 0x00,
		0x00, 0x00, 0x9A, 0xB8, 0xD1, 0xEC, 0xF6, 0xF9, 0xFF, 0xFE, 0xFB, 0xCE, 0xCA, 0xE2, 0xFA, 0xF5, 0xE6, 0xDB, 0xC8, 0xF3, 0xF3, 0xDD, 0xEE, 0xF8, 0xF9, 0xEE, 0xE7, 0xD2, 0xBF, 0x9F, 0x00, 0x00,
		0x00, 0x00, 0x93, 0xB3, 0xDB, 0xF1, 0xFB, 0xFE, 0xFD, 0xEB, 0xF4, 0xCB, 0xC1, 0xCF, 0xED, 0xE6, 0xBC, 0xAD, 0xAB, 0xB7, 0xD5, 0xE0, 0xD2, 0xE3, 0xF3, 0xE6, 0xDE, 0xCD, 0xBC, 0xAA, 0x00, 0x00,
		0x00, 0x4A, 0x87, 0xAA, 0xD5, 0xE7, 0xF7, 0xFC, 0xEE, 0xE5, 0xEF, 0xCC, 0xA2, 0xA5, 0xBC, 0xBA, 0xAE, 0x7D, 0x7D, 0x76, 0x89, 0xAC, 0xAD, 0xAD, 0xC8, 0xD5, 0xD0, 0xC8, 0xC2, 0xAD, 0x00, 0x00,
		0x00, 0x2F, 0x80, 0x9E, 0xCE, 0xE1, 0xF0, 0xF7, 0xE4, 0xC0, 0xBF, 0xA1, 0x93, 0xA2, 0xAA, 0xC7, 0xA8, 0x8B, 0x88, 0x80, 0x7A, 0x85, 0x94, 0x9F, 0xA4, 0xAB, 0xAE, 0xC7, 0xBF, 0xB0, 0x00, 0x00,
		0x00, 0x2E, 0x61, 0x97, 0xBE, 0xDC, 0xEB, 0xE2, 0xB6, 0x9F, 0x99, 0x7E, 0x8F, 0x9C, 0xBC, 0xDE, 0xDF, 0xD3, 0xC3, 0xCC, 0xC6, 0xC4, 0x82, 0x88, 0x9B, 0x9F, 0xB0, 0xAE, 0xC3, 0xB0, 0x00, 0x00,
		0x00, 0x4C, 0x4A, 0x8F, 0xB2, 0xD3, 0xCA, 0xB3, 0x8F, 0x88, 0x87, 0x96, 0xB0, 0xD3, 0xEE, 0xEF, 0xF5, 0xEC, 0xD7, 0xCC, 0xE3, 0xC7, 0x8C, 0x79, 0x80, 0x99, 0x9F, 0x92, 0xBD, 0xAB, 0x00, 0x00,
		0x00, 0x00, 0x53, 0x79, 0xB0, 0xB0, 0xB9, 0x9F, 0x94, 0x8F, 0xC3, 0xD9, 0xCC, 0xC4, 0xBF, 0xDF, 0xC9, 0xAF, 0xD0, 0xC0, 0xB3, 0x99, 0x83, 0x76, 0x80, 0x8E, 0x85, 0x83, 0xA6, 0x92, 0x00, 0x00,
		0x00, 0x00, 0x5D, 0x5F, 0xA4, 0x8A, 0x9A, 0xA0, 0x94, 0x98, 0xBB, 0xB9, 0xBE, 0xD2, 0xC3, 0xE0, 0xD9, 0xC8, 0xE0, 0xBC, 0x90, 0x78, 0x6E, 0x65, 0x78, 0x75, 0x73, 0x7C, 0x90, 0x7C, 0x00, 0x00,
		0x00, 0x00, 0x00
	};
	std::vector<int> G2 = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x23, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x3D, 0x5F, 0x78, 0x78, 0x78, 0x5F, 0x3D, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x92, 0xB3, 0xCC, 0xD3, 0xD7, 0xDE, 0xDB, 0xC6, 0x9E, 0x55, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0xBC, 0xB8, 0xB4, 0xC0, 0xCB, 0xCE, 0xCC, 0xC2, 0xC3, 0xBF, 0xC4, 0x9C, 0x51, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0xB5, 0xAF, 0xAE, 0xB2, 0xB7, 0xC5, 0xCE, 0xC1, 0xBA, 0xBE, 0xB8, 0xB4, 0xB9, 0xBC, 0x84, 0x2B, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xB3, 0xAA, 0xA6, 0xA4, 0xA7, 0xB4, 0xC1, 0xC4, 0xB6, 0xB6, 0xBC, 0xB8, 0xB3, 0xBE, 0xBA, 0xBC, 0xA0, 0x4E, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x62, 0xAD, 0xA7, 0xA8, 0xA3, 0xA2, 0xA6, 0xB3, 0xBB, 0xC0, 0xBC, 0xD3, 0xC5, 0xC3, 0xBD, 0xBB, 0xBE, 0xAF, 0xAA, 0xA1, 0x67, 0x2E, 0x1E, 0x4C, 0x30, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x39, 0x98, 0xA5, 0xA9, 0xA9, 0xA9, 0xAE, 0xB3, 0xC3, 0xD5, 0xD7, 0xD3, 0xF0, 0xD8, 0xD3, 0xD4, 0xC3, 0xB6, 0xA9, 0x9F, 0x97, 0x90, 0x75, 0x6F, 0x6D, 0x3D, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x6A, 0x92, 0xA3, 0xAB, 0xAF, 0xB9, 0xBF, 0xBD, 0xC7, 0xE7, 0xDF, 0xDD, 0xD9, 0xCD, 0xC4, 0xB2, 0xA3, 0xA7, 0xAE, 0xA6, 0x9F, 0x8B, 0x7F, 0x87, 0x79, 0x57, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x3C, 0x75, 0x88, 0xA3, 0xA9, 0xAB, 0xA6, 0xA2, 0xAD, 0xAC, 0xC7, 0xD5, 0xC8, 0xB8, 0xB1, 0x9F, 0x92, 0xA9, 0xB6, 0xA6, 0x96, 0x9B, 0x94, 0x83, 0x92, 0x7F, 0x68, 0x56, 0x00, 0x00,
		0x00, 0x00, 0x5D, 0x78, 0x7D, 0x95, 0xA1, 0xA8, 0x97, 0x97, 0xA6, 0xA9, 0xB6, 0xCA, 0xC9, 0xB7, 0xAE, 0x9B, 0x91, 0x92, 0xA0, 0x88, 0x7C, 0x82, 0x9A, 0xB0, 0xAE, 0x93, 0x76, 0x60, 0x00, 0x00,
		0x00, 0x00, 0x75, 0x6A, 0x78, 0x98, 0x9F, 0xA2, 0xA6, 0x9F, 0x8F, 0x90, 0xA3, 0xBD, 0xB8, 0xAD, 0x90, 0x8D, 0x96, 0x95, 0x81, 0x61, 0x98, 0x70, 0x9B, 0xA1, 0xA7, 0x9F, 0x82, 0x6A, 0x00, 0x00,
		0x00, 0x00, 0x7E, 0x70, 0x6E, 0x7E, 0x79, 0x87, 0x88, 0x8F, 0x92, 0x8F, 0x84, 0x9C, 0x9F, 0x8F, 0x88, 0xA4, 0x8B, 0xAC, 0x87, 0x97, 0x94, 0x86, 0x94, 0x9A, 0xA1, 0x9A, 0x86, 0x77, 0x00, 0x00,
		0x00, 0x00, 0x83, 0x9C, 0x9C, 0x7A, 0x68, 0x8F, 0x63, 0x7B, 0xB7, 0x9B, 0x7F, 0x85, 0x8E, 0x7C, 0x7B, 0x8A, 0x88, 0x87, 0x9D, 0x9D, 0x87, 0x80, 0x88, 0x96, 0xA1, 0x9C, 0x86, 0x76, 0x00, 0x00,
		0x00, 0x00, 0x84, 0xA6, 0xA6, 0x81, 0x6A, 0x8E, 0x8A, 0xA0, 0x90, 0x81, 0x67, 0x7D, 0x8A, 0x7D, 0x85, 0x8F, 0x8E, 0x8A, 0x8A, 0x8C, 0x95, 0x94, 0x99, 0x99, 0x9C, 0xA1, 0x8B, 0x70, 0x00, 0x00,
		0x00, 0x00, 0x70, 0x9E, 0x93, 0x8C, 0x7B, 0x81, 0x8C, 0x87, 0x86, 0x8D, 0x68, 0x8B, 0x8A, 0x81, 0x90, 0xA0, 0xAE, 0xAF, 0xA9, 0xA7, 0xA9, 0xA7, 0xA4, 0x9E, 0x97, 0x9A, 0x8B, 0x72, 0x00, 0x00,
		0x00, 0x00, 0x76, 0x98, 0x8E, 0x90, 0x8F, 0x88, 0x8C, 0x8B, 0x9F, 0x93, 0x6C, 0x93, 0x98, 0x8E, 0x8B, 0x99, 0xB3, 0xBB, 0xBD, 0xC6, 0xD6, 0xCF, 0xB8, 0xAC, 0x98, 0x96, 0x87, 0x71, 0x00, 0x00,
		0x00, 0x00, 0x79, 0x96, 0x8F, 0x97, 0x9C, 0x9A, 0xA4, 0xB5, 0xC7, 0xA8, 0x7A, 0x9A, 0xA4, 0x94, 0x90, 0x91, 0x8E, 0xAA, 0xA0, 0xAE, 0xD1, 0xDF, 0xC1, 0xB7, 0xA3, 0x99, 0x85, 0x71, 0x00, 0x00,
		0x00, 0x00, 0x73, 0x8A, 0x91, 0xA0, 0xA4, 0xB0, 0xCB, 0xCE, 0xC7, 0x94, 0x8B, 0x9C, 0xB1, 0xA1, 0x9B, 0x96, 0x88, 0xAE, 0xAD, 0x99, 0xAE, 0xC2, 0xC3, 0xB4, 0xAB, 0x9D, 0x8E, 0x78, 0x00, 0x00,
		0x00, 0x00, 0x74, 0x87, 0x99, 0xA3, 0xB1, 0xCC, 0xD7, 0xB3, 0xB0, 0x8F, 0x84, 0x91, 0xB1, 0xA6, 0x77, 0x6F, 0x78, 0x83, 0x9F, 0xA9, 0x99, 0xB0, 0xC0, 0xB2, 0xA7, 0xA0, 0x94, 0x80, 0x00, 0x00,
		0x00, 0x42, 0x71, 0x84, 0x9A, 0xA2, 0xB4, 0xC3, 0xB7, 0xA4, 0xA9, 0x92, 0x69, 0x70, 0x8A, 0x88, 0x79, 0x47, 0x4F, 0x53, 0x66, 0x87, 0x86, 0x84, 0x9D, 0xAA, 0xA4, 0x9F, 0x9C, 0x87, 0x00, 0x00,
		0x00, 0x2F, 0x71, 0x81, 0x9A, 0xA4, 0xB2, 0xBA, 0xAC, 0x8C, 0x91, 0x75, 0x64, 0x6E, 0x75, 0x90, 0x67, 0x49, 0x48, 0x49, 0x49, 0x5E, 0x75, 0x7D, 0x80, 0x87, 0x89, 0xA2, 0x9A, 0x89, 0x00, 0x00,
		0x00, 0x2C, 0x57, 0x7F, 0x91, 0xA3, 0xAF, 0xA9, 0x89, 0x7E, 0x7D, 0x5C, 0x60, 0x5F, 0x79, 0x95, 0x8D, 0x7D, 0x71, 0x7B, 0x7F, 0x90, 0x62, 0x6C, 0x7C, 0x80, 0x8E, 0x8C, 0x9F, 0x88, 0x00, 0x00,
		0x00, 0x3B, 0x3C, 0x7B, 0x90, 0xA2, 0x98, 0x8B, 0x70, 0x68, 0x5F, 0x61, 0x73, 0x89, 0x9C, 0xAD, 0xB2, 0xAA, 0x98, 0x92, 0xA5, 0x91, 0x69, 0x62, 0x68, 0x79, 0x7D, 0x70, 0x99, 0x82, 0x00, 0x00,
		0x00, 0x00, 0x44, 0x64, 0x90, 0x8A, 0x8F, 0x7A, 0x78, 0x71, 0x98, 0xA2, 0x94, 0x89, 0x85, 0xB3, 0x9C, 0x83, 0xA3, 0x87, 0x80, 0x6F, 0x65, 0x5F, 0x68, 0x74, 0x69, 0x6C, 0x91, 0x7C, 0x00, 0x00,
		0x00, 0x00, 0x49, 0x4A, 0x86, 0x73, 0x7B, 0x84, 0x7D, 0x79, 0x94, 0x8F, 0x90, 0x9F, 0x8D, 0x9E, 0x98, 0x87, 0x9D, 0x85, 0x66, 0x5B, 0x53, 0x4D, 0x64, 0x61, 0x61, 0x6A, 0x80, 0x70, 0x00, 0x00,
		0x00, 0x00, 0x00
	};
	std::vector<int> B2 = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x21, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x42, 0x62, 0x7E, 0x7E, 0x7E, 0x62, 0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x98, 0xB8, 0xC8, 0xCF, 0xD5, 0xDE, 0xDD, 0xCC, 0xA3, 0x56, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0xB7, 0xB1, 0xB1, 0xBE, 0xC5, 0xCA, 0xCC, 0xBE, 0xBF, 0xBA, 0xBC, 0x9D, 0x53, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0xB0, 0xA3, 0xA4, 0xAC, 0xB4, 0xBE, 0xCB, 0xC0, 0xB8, 0xB7, 0xAF, 0xAB, 0xB1, 0xB8, 0x84, 0x2E, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xB0, 0xA1, 0x9B, 0xA0, 0xA7, 0xB1, 0xBA, 0xC1, 0xB3, 0xBD, 0xBC, 0xB4, 0xB1, 0xB0, 0xB2, 0xB7, 0x9A, 0x56, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x5D, 0xA6, 0x9F, 0x9E, 0x9B, 0x9E, 0xA2, 0xAF, 0xB6, 0xC0, 0xBD, 0xD3, 0xC4, 0xC4, 0xC0, 0xBF, 0xB6, 0xA3, 0xA4, 0x9D, 0x64, 0x2E, 0x23, 0x46, 0x29, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x3A, 0x91, 0x9C, 0xA3, 0xA6, 0xA8, 0xAE, 0xB2, 0xC0, 0xD3, 0xD9, 0xD8, 0xF0, 0xDD, 0xD5, 0xD5, 0xC1, 0xAD, 0x9C, 0x97, 0x97, 0x91, 0x74, 0x6C, 0x65, 0x36, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x68, 0x86, 0x97, 0xA8, 0xAE, 0xB7, 0xBE, 0xBD, 0xC4, 0xE4, 0xE0, 0xE1, 0xD6, 0xCD, 0xC2, 0xAC, 0x94, 0x9C, 0xA7, 0x9D, 0x99, 0x83, 0x72, 0x76, 0x6A, 0x51, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x3D, 0x6F, 0x79, 0x95, 0x9F, 0xA0, 0x9B, 0x97, 0xA3, 0xA7, 0xC2, 0xD2, 0xCA, 0xB2, 0xAC, 0x99, 0x87, 0x91, 0xAE, 0xA6, 0x90, 0x93, 0x8B, 0x7B, 0x8A, 0x75, 0x61, 0x55, 0x00, 0x00,
		0x00, 0x00, 0x54, 0x6B, 0x6F, 0x8E, 0x98, 0x9C, 0x89, 0x83, 0x95, 0xA5, 0xAA, 0xC4, 0xCC, 0xAC, 0x9E, 0x90, 0x8A, 0x92, 0x97, 0x85, 0x84, 0x79, 0x8C, 0xA4, 0xA2, 0x85, 0x6E, 0x62, 0x00, 0x00,
		0x00, 0x00, 0x6A, 0x5E, 0x6D, 0x92, 0x9C, 0x9E, 0x9F, 0x96, 0x84, 0x86, 0x92, 0xB0, 0xB6, 0xA2, 0x7F, 0x81, 0x91, 0x9E, 0x7E, 0x57, 0x95, 0x64, 0x8C, 0x90, 0x97, 0x8F, 0x7B, 0x6C, 0x00, 0x00,
		0x00, 0x00, 0x73, 0x67, 0x66, 0x77, 0x75, 0x84, 0x7F, 0x89, 0x8D, 0x84, 0x72, 0x8F, 0x9A, 0x86, 0x78, 0x98, 0x89, 0xB7, 0x89, 0x91, 0x8F, 0x7C, 0x88, 0x8D, 0x91, 0x8B, 0x7E, 0x78, 0x00, 0x00,
		0x00, 0x00, 0x74, 0x91, 0x94, 0x6B, 0x63, 0x8F, 0x5F, 0x7C, 0xBD, 0x9A, 0x76, 0x80, 0x91, 0x73, 0x6E, 0x80, 0x89, 0x84, 0x98, 0x97, 0x82, 0x7A, 0x80, 0x8D, 0x94, 0x8E, 0x7E, 0x79, 0x00, 0x00,
		0x00, 0x00, 0x78, 0x98, 0x99, 0x74, 0x62, 0x88, 0x86, 0xA7, 0x95, 0x7B, 0x5F, 0x7A, 0x8A, 0x74, 0x7A, 0x88, 0x8E, 0x88, 0x81, 0x83, 0x88, 0x97, 0x97, 0x90, 0x91, 0x95, 0x84, 0x6B, 0x00, 0x00,
		0x00, 0x00, 0x6B, 0x8F, 0x82, 0x82, 0x70, 0x75, 0x84, 0x84, 0x81, 0x81, 0x60, 0x87, 0x89, 0x7A, 0x88, 0x97, 0xA8, 0xB2, 0xA4, 0xA0, 0xA4, 0xAC, 0xA2, 0x94, 0x8D, 0x92, 0x84, 0x68, 0x00, 0x00,
		0x00, 0x00, 0x71, 0x8C, 0x7E, 0x82, 0x89, 0x84, 0x84, 0x81, 0x96, 0x8C, 0x69, 0x92, 0x99, 0x87, 0x81, 0x90, 0xAC, 0xB1, 0xB2, 0xC0, 0xD9, 0xD0, 0xB2, 0xA4, 0x93, 0x92, 0x83, 0x6D, 0x00, 0x00,
		0x00, 0x00, 0x78, 0x8D, 0x7F, 0x88, 0x95, 0x96, 0x9F, 0xB0, 0xC1, 0xA1, 0x75, 0x98, 0xA3, 0x93, 0x8B, 0x8B, 0x8A, 0x9F, 0x92, 0xA2, 0xCC, 0xE0, 0xBC, 0xAD, 0x9E, 0x97, 0x85, 0x70, 0x00, 0x00,
		0x00, 0x00, 0x75, 0x83, 0x82, 0x94, 0x9F, 0xAB, 0xC3, 0xC8, 0xC2, 0x8C, 0x85, 0x99, 0xB0, 0xA6, 0x97, 0x8D, 0x80, 0xA4, 0xA0, 0x8E, 0xA6, 0xBD, 0xBE, 0xAD, 0xAA, 0x99, 0x89, 0x74, 0x00, 0x00,
		0x00, 0x00, 0x74, 0x81, 0x8F, 0x9C, 0xB0, 0xC7, 0xCB, 0xA6, 0xA7, 0x85, 0x7A, 0x88, 0xA7, 0xA2, 0x69, 0x57, 0x60, 0x6A, 0x88, 0x97, 0x8A, 0xA0, 0xB0, 0xAB, 0xA7, 0x9A, 0x8B, 0x7B, 0x00, 0x00,
		0x00, 0x3E, 0x6F, 0x7F, 0x8F, 0x9B, 0xAF, 0xBB, 0xAC, 0x9A, 0xA0, 0x83, 0x5A, 0x60, 0x79, 0x77, 0x5E, 0x2C, 0x37, 0x2F, 0x65, 0x63, 0x63, 0x67, 0x86, 0x99, 0x97, 0x94, 0x94, 0x85, 0x00, 0x00,
		0x00, 0x27, 0x71, 0x7B, 0x8F, 0x9C, 0xAD, 0xB0, 0x9F, 0x7D, 0x7B, 0x5D, 0x4D, 0x58, 0x61, 0x84, 0x55, 0x39, 0x3F, 0x39, 0x34, 0x43, 0x55, 0x63, 0x69, 0x77, 0x7D, 0x9A, 0x95, 0x8A, 0x00, 0x00,
		0x00, 0x25, 0x56, 0x79, 0x8A, 0x9E, 0xA7, 0x9E, 0x77, 0x66, 0x61, 0x3D, 0x49, 0x4C, 0x69, 0x98, 0x8B, 0x7D, 0x75, 0x81, 0x7F, 0x86, 0x51, 0x58, 0x6C, 0x75, 0x89, 0x86, 0x99, 0x88, 0x00, 0x00,
		0x00, 0x3D, 0x34, 0x7A, 0x92, 0x9D, 0x8C, 0x7C, 0x5B, 0x52, 0x4A, 0x52, 0x6A, 0x87, 0xA1, 0xB9, 0xB7, 0xA8, 0x8F, 0x7E, 0x96, 0x82, 0x55, 0x51, 0x5C, 0x70, 0x77, 0x6A, 0x91, 0x80, 0x00, 0x00,
		0x00, 0x00, 0x37, 0x61, 0x91, 0x84, 0x85, 0x6C, 0x65, 0x5C, 0x87, 0x94, 0x89, 0x7F, 0x7C, 0xB0, 0x93, 0x79, 0x96, 0x73, 0x6B, 0x5A, 0x4C, 0x50, 0x5C, 0x6B, 0x62, 0x62, 0x89, 0x7C, 0x00, 0x00,
		0x00, 0x00, 0x3B, 0x44, 0x8A, 0x6A, 0x6F, 0x76, 0x6C, 0x67, 0x7C, 0x81, 0x82, 0x91, 0x7E, 0x9E, 0x94, 0x82, 0x97, 0x77, 0x54, 0x47, 0x41, 0x41, 0x59, 0x58, 0x5B, 0x61, 0x7C, 0x75, 0x00, 0x00,
		0x00, 0x00, 0x00
	};
	std::vector<int> A2 = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	};
	std::vector<int> R3 = {
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87
	};
	std::vector<int> G3 = {
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87
	};
	std::vector<int> B3 = {
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87,
		0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87
	};
	std::vector<int> A3 = {
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	};
	std::vector<int> RGBA1 = { 0x00 };
	testsprite.set(100, 100, R1, G1, B1, A1, 5, 5, 1.0);
	spr_Geno.set(120, 120, R2, G2, B2, A2, 32, 46, 2.0);
	normal_tile.set(1, 1, R3, G3, B3, A3, 35, 35, 1.0);
	empty_tile.set(0, 0, RGBA1, RGBA1, RGBA1, RGBA1, 0, 0, 1.0);
	spr_Null.set(0, 0, RGBA1, RGBA1, RGBA1, RGBA1, 0, 0, 1.0);
	return true;
}

obj_Player testPlayer;
obj_Enemy testEnemy("GENO");
obj_Tile tile_Normal;
obj_Tile _tile_Empty;
std::vector<obj_Tile> layout_level1;

void init_objects()
{
	testPlayer.set(testsprite, 10, 150, 5);
	tile_Normal.set(normal_tile, 0, 0, 2.0);
	_tile_Empty.set(empty_tile, 0, 0, 35.0);
	obj_Tile tempArray[70] = {
		tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal,
		tile_Normal, _tile_Empty, tile_Normal, _tile_Empty, tile_Normal, _tile_Empty, _tile_Empty, _tile_Empty, _tile_Empty, tile_Normal, _tile_Empty, tile_Normal, _tile_Empty, tile_Normal,
		tile_Normal, tile_Normal, tile_Normal, _tile_Empty, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, _tile_Empty, tile_Normal, tile_Normal, tile_Normal,
		tile_Normal, _tile_Empty, tile_Normal, _tile_Empty, tile_Normal, _tile_Empty, _tile_Empty, _tile_Empty, _tile_Empty, tile_Normal, _tile_Empty, tile_Normal, _tile_Empty, tile_Normal,
		tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal, tile_Normal
	};
	for (int i = 0; i < 70; i++)
		layout_level1.push_back(tempArray[i]);
	int step = 0;
	for (int height = 0; height < 5; height++)
	{
		for (int width = 0; width < 14; width++)
		{
			layout_level1[step].move(5 + (35 * width), 5 + (35 * height));
			step++;
		}
	}
	testEnemy.set(41, 5, 1.0);
}

bool touchInBox(touchPosition touch, int x, int y, int w, int h)
{
	int tx=touch.px;
	int ty=touch.py;
	u32 kDown = hidKeysDown();
	if (kDown & KEY_TOUCH && tx > x && tx < x+w && ty > y && ty < y+h) {
		return true;
	} else {
		return false;
	}
}

touchPosition touch;
bool gameRunning = true;

PrintConsole topScreen, bottomScreen, versionWin, killBox, debugBox;

FS_Archive sdmcArchive;

void openSD()
{
	FSUSER_OpenArchive(&sdmcArchive, ARCHIVE_SDMC, fsMakePath(PATH_EMPTY, ""));
}

void closeSD()
{
	FSUSER_CloseArchive(sdmcArchive);
}

int main(int argc, char **argv)
{
	srand(time(NULL));
	sf2d_init();
	sftd_init();
	sf2d_set_3D(1);
	consoleInit(GFX_BOTTOM, &bottomScreen);
	consoleInit(GFX_BOTTOM, &versionWin);
	consoleInit(GFX_BOTTOM, &killBox);
	consoleInit(GFX_BOTTOM, &debugBox);
	
	consoleSetWindow(&versionWin, 5, 26, 35, 2);
	consoleSetWindow(&killBox, 0, 28, 40, 2);
	consoleSetWindow(&debugBox, 18, 4, 9, 12);

	consoleSelect(&versionWin);
	std::cout << "      Tap red area any time to exit";
	std::cout << "MaVeRo-3D Version: " ANSI RED CEND << versiontxtt << CRESET " " ANSI YELLOW CEND << versiontxtn;

	consoleSelect(&killBox);
	std::cout << ANSI B_RED CEND;
	for (int i = 0; i < 80; i++)
		std::cout << " ";

	/*consoleSelect(&topScreen);
	std::cout << ANSI "29;07" PEND "by Matthew Rease\n";*/

	consoleSelect(&bottomScreen);
	
	hidTouchRead(&touch);

	sf2d_set_clear_color(RGBA8(0x95, 0x95, 0x95, 0xFF));
	sf2d_set_vblank_wait(1);
	sf2d_texture *img_title = sfil_load_PNG_buffer(Title_png, SF2D_PLACE_RAM);
	default_fnt = sftd_load_font_mem(calibri_ttf, calibri_ttf_size);
	init_sprites();
	init_objects();
	
	std::cout << ANSI "2;0" PEND "Press Select to begin.";

	// Main loop
	while (aptMainLoop())
	{
		hidScanInput();
		u32 kDown = hidKeysDown();
		u32 kHeld = hidKeysHeld();
		if (kDown & KEY_START) break; // break in order to return to hbmenu
		if (kDown & KEY_SELECT)
		{
			int result;
			sf2d_swapbuffers();
			while (true)
			{
				result = MaVeRo();
				if (result != 0)
					break;
			}
			if (result == 3)
				break;
		}

		sf2d_start_frame(GFX_TOP, GFX_LEFT);
		sf2d_draw_texture(img_title, 80, 20);
		sf2d_end_frame();

		sf2d_swapbuffers();
		
		hidTouchRead(&touch);

		if(touchInBox(touch, 0, 224, 320, 16)) {
			std::cout << "Exiting...\n";
			break;
		}
	}

	// Exit services
	sf2d_fini();
	sftd_fini();
	sf2d_free_texture(img_title);
	
	return 0;
}

int tempScale = 1;

int MaVeRo()
{
	hidScanInput();
	u32 kDown = hidKeysDown();
	u32 kHeld = hidKeysHeld();
	if (kDown & KEY_SELECT)
		return 2;
	if (kHeld & KEY_START)
		return 3;
	if (kDown & KEY_LEFT)
		tempScale--;
	if (kDown & KEY_RIGHT)
		tempScale++;
	if (kHeld & KEY_L)
		tempScale--;
	if (kHeld & KEY_R)
		tempScale++;
	testsprite.scale(tempScale);
	sf2d_set_3D(1);
	offset3d = CONFIG_3D_SLIDERSTATE * 30.0f;
	sf2d_start_frame(GFX_TOP, GFX_LEFT);
	sftd_draw_text(default_fnt, 5, 5, RGBA8(0xFF, 0x00, 0x00, 0xFF), 20, test);
	sftd_draw_textf(default_fnt, 234 - (offset3d / 2.0), 20, RGBA8(0xFF, 0x80, 0x00, 0xFF), 18, "I'm tiny!!!");
	sftd_draw_text(default_fnt, 200 + (offset3d / 2.0), 30, RGBA8(0x00, 0x80, 0xFF, 0xFF), 36, test3d);
	testsprite.draw(+(offset3d / 4.0), 0);
	spr_Geno.draw(+(offset3d / 4.0), 0);
	//for (int i = 0; i < 70; i++)
		//layout_level1[i].draw(0, 0);
	//testPlayer.draw(0, 0);
	//testEnemy.draw(0, 0);
	sf2d_end_frame();
	sf2d_start_frame(GFX_TOP, GFX_RIGHT);
	sftd_draw_text(default_fnt, 5, 5, RGBA8(0xFF, 0x00, 0x00, 0xFF), 20, test);
	sftd_draw_textf(default_fnt, 234 + (offset3d / 2.0), 20, RGBA8(0xFF, 0x80, 0x00, 0xFF), 18, "I'm tiny!!!");
	sftd_draw_text(default_fnt, 200 - (offset3d / 2.0), 30, RGBA8(0x00, 0x80, 0xFF, 0xFF), 36, test3d);
	testsprite.draw(-(offset3d / 4.0), 0);
	spr_Geno.draw(-(offset3d / 4.0), 0);
	for (int i = 0; i < 70; i++)
	{
		std::cout << "drawing: " << i << "\n";
		layout_level1[i].draw(0, 0);
	}
	//testPlayer.draw(0, 0);
	//testEnemy.draw(0, 0);
	sf2d_end_frame();
	sf2d_swapbuffers();
	return 0;
}
